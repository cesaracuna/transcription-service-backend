name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "1.6.1"

jobs:
  # Linting and code quality checks
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root --with dev

    - name: Install project
      run: poetry install --no-interaction

    - name: Run Black formatter check
      run: poetry run black --check app tests

    - name: Run isort import sorting check
      run: poetry run isort --check-only app tests

    - name: Run flake8 linting
      run: poetry run flake8 app tests

    - name: Run mypy type checking
      run: poetry run mypy app

  # Security scanning
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: poetry install --no-interaction --no-root --with dev

    - name: Run bandit security scanner
      run: poetry run bandit -r app/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Run safety dependency scanner
      run: poetry run safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit tests
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: poetry install --no-interaction --no-root --with dev

    - name: Run unit tests
      run: poetry run pytest tests/unit/ -v --cov=app.domain --cov=app.infrastructure --cov-report=xml --cov-report=term

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Integration tests
  integration-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_pass
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install dependencies
      run: poetry install --no-interaction --no-root --with dev

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U test_user; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Run database migrations
      env:
        DB_URL: postgresql://test_user:test_pass@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/15
        ENVIRONMENT: testing
      run: poetry run alembic upgrade head

    - name: Run integration tests
      env:
        DB_URL: postgresql://test_user:test_pass@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/15
        CELERY_BROKER_URL: redis://localhost:6379/15
        CELERY_RESULT_BACKEND: redis://localhost:6379/15
        ENVIRONMENT: testing
      run: poetry run pytest tests/integration/ -v --cov-append --cov-report=xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integration
        name: codecov-integration

  # Build and test Docker image
  docker-build:
    runs-on: ubuntu-latest
    needs: [lint, security, unit-tests]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (testing stage)
      uses: docker/build-push-action@v5
      with:
        context: .
        target: testing
        tags: transcription-service:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run tests in Docker
      run: |
        docker run --rm \
          -e ENVIRONMENT=testing \
          -e DB_URL=sqlite:///./test.db \
          -e REDIS_URL=redis://localhost:6379/15 \
          transcription-service:test \
          pytest tests/unit/ -v

    - name: Build production Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        tags: transcription-service:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # E2E tests (only on main branch)
  e2e-tests:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [integration-tests, docker-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Start services with Docker Compose
      run: |
        docker-compose -f docker-compose.test.yml up -d db-test redis-test
        sleep 10

    - name: Run E2E tests
      run: |
        docker-compose -f docker-compose.test.yml run --rm e2e-tests
      continue-on-error: true

    - name: Collect test results
      run: |
        docker-compose -f docker-compose.test.yml logs app-test > e2e-logs.txt
        docker-compose -f docker-compose.test.yml down -v

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      with:
        name: e2e-test-results
        path: |
          e2e-logs.txt
          htmlcov/

  # Dependency vulnerability check
  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate

  # Performance tests
  performance:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry and dependencies
      run: |
        pip install poetry
        poetry install --no-interaction --no-root --with dev

    - name: Run performance tests
      run: |
        # Add performance testing commands here
        echo "Performance tests would run here"
        # poetry run pytest tests/performance/ -v

  # Notify on success/failure
  notify:
    runs-on: ubuntu-latest
    needs: [lint, security, unit-tests, integration-tests, docker-build]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.lint.result == 'success' && needs.security.result == 'success' && needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.docker-build.result == 'success' }}
      run: echo "✅ All CI checks passed!"

    - name: Notify failure
      if: ${{ needs.lint.result == 'failure' || needs.security.result == 'failure' || needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.docker-build.result == 'failure' }}
      run: |
        echo "❌ CI checks failed!"
        exit 1