apiVersion: v1
kind: ConfigMap
metadata:
  name: transcription-service-config
  namespace: transcription-service
data:
  ENVIRONMENT: "production"
  LOGGING_LEVEL: "INFO"
  AI_DEVICE: "cpu"
  
  # Database configuration
  DB_HOST: "postgres-service"
  DB_PORT: "5432"
  DB_NAME: "transcription_db"
  
  # Redis configuration
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  
  # Celery configuration
  CELERY_BROKER_HOST: "redis-service"
  CELERY_RESULT_BACKEND_HOST: "redis-service"
  
  # Audio processing settings
  AUDIO_SAMPLE_RATE: "16000"
  AUDIO_MAX_FILE_SIZE: "104857600"  # 100MB
  
  # AI model settings
  WHISPER_MODEL_PATH: "openai/whisper-large-v3"
  DIARIZATION_MODEL_PATH: "pyannote/speaker-diarization"
  
  # Storage settings
  STORAGE_TYPE: "local"
  STORAGE_BASE_PATH: "/app/data"
  
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: transcription-service
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }
    
    http {
        upstream app {
            server transcription-service:8000;
        }
        
        server {
            listen 80;
            client_max_body_size 100M;
            
            location / {
                proxy_pass http://app;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 60s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;
            }
            
            location /health {
                proxy_pass http://app/health;
                access_log off;
            }
            
            location /metrics {
                proxy_pass http://app/metrics;
                access_log off;
            }
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init
  namespace: transcription-service
data:
  init.sql: |
    CREATE DATABASE transcription_db;
    CREATE USER transcription_user WITH PASSWORD 'transcription_pass';
    GRANT ALL PRIVILEGES ON DATABASE transcription_db TO transcription_user;
    
    \c transcription_db;
    
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";